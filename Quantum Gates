import numpy as np
import math
x=np.zeros((2,2))                                                                      #X gate
g=np.zeros((2,1))                                                                      #ground state
e=np.zeros((2,1))                                                                      #excited state
h=np.ones((2,2))                                                                       #Hadamard gate
Z=np.zeros((2,2))
y=np.zeros((2,2))
one=np.zeros((2,2))
zr=np.zeros((2,2))
Z[0][0]=1
Z[1][1]=-1
x[0][1]=1
x[1][0]=1
g[0][0]=1
e[1][0]=1
h[1][1]=-1
y[0][1]=-1
y[1][0]=1
one[0][0]=1
one[1][1]=1
br=0



#Take input and make an array in that order with the gates being the variables
word=input()
lst = [w for w in word]
ln=int(len(word))
lst1=[0]*ln
lst2=[one]*ln
f=0
for w in range(ln):
    if (lst[w] == 'H'):
        lst1[w] = 1/math.sqrt(2)*h
    if (lst[w] == 'X'):
        lst1[w] = x
    if (lst[w] == "E"):
        lst1[w] = e
    if (lst[w] == "G"):
        lst1[w] = g
    if (lst[w] == "Z"):
        lst1[w] = Z
    if (lst[w] == "Y"):
        lst1[w]=one
        br+=1
        i=w
        if(br%2==0):
            while i < ln:
                lst2[i]=one
                i += 1
        else:
            while i < ln:
                lst2[i] =y
                i += 1





#i want to create a matrix multiplicator that checks the sizes of the matrices and gives me the end result matrix, i will make it as a function
def mmp(a,b):
    for i in range(n):
            for j in range(m1):
                c=0
                for z in range(m):
                    c=c+a[i][z]*b[z][j]
                rez[i][j]=c
    return rez
def mmp2(a,b):
    for i in range(n):
            for j in range(m1):
                c=0
                for z in range(m):
                    c=c+a[i][z]*b[z][j]
                rez2[i][j]=c
    return rez2


#main i guess
for w in range(ln-1):
    n = np.size(lst1[w], 0)
    m = np.size(lst1[w], 1)
    m1 = np.size(lst1[w+1], 1)
    a = np.ones((n, m))
    b = np.ones((m, m1))
    rez = np.zeros((n, m1))
    rez2 = np.zeros((n, m1))
    a = lst1[w]
    b = lst1[w + 1]
    lst1[w+1]=mmp(a,b)
    #print(lst2[w+1])
    print(lst[w+1],a," X ",b," = ",lst1[w+1]," X ",lst2[w+1]," = ",mmp2(lst1[w+1],lst2[w+1]))
    print("")
    print("")




