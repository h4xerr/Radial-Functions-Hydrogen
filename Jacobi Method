/* Program Gauss_Jacobi
   Solution of a system of linear equations by Gauss-Jacobi's iteration
   method. Testing of diagonal dominance is also incorporated */

#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<iostream>
using namespace std;
int main()
{
	int n,np=10,nrot,nmax=500;
	float a[np][np],d[np],v[np][np];
	int i,ip,iq,j;
	float c,g,h,s,sm,t,tau,theta,tresh,b[nmax],z[nmax];
	std::cout<<"Vnesi n:";
	std::cin>>n;
	for(ip=0;ip<n;ip++)
    {
        for(iq=0;iq<n;iq++)
        v[ip][iq]=0;
        v[ip][ip]=1;
    }
        for(ip=0;ip<n;ip++)
    {
        for(iq=0;iq<n;iq++)
        {
        cout<<"Vnesi a"<<ip<<iq<<endl;
        cin>>a[ip][iq];
        }
    }
    
    
    for(ip=0;ip<n;ip++)
    {
        b[ip]=a[ip][ip];
        d[ip]=b[ip];
        z[ip]=0;
    }
    
    
    nrot=0;
    for(i=0;i<50;i++)
    {
        sm=0;
        for(ip=0;ip<n-1;ip++)
        {
            for(iq=ip+1;iq<n;iq++)
            sm=sm+abs(a[ip][iq]);
            cout<<sm;
        }
        if(i<4)
            tresh=0.2*sm/pow(n,2);
        else
            tresh=0;
        for(ip=0;i<n-1;ip++)
        {
            for(iq=ip+1;iq<n;iq++)
            {
                g=100*abs(a[ip][iq]);
                if(i>4 && abs(d[ip])+g==abs(d[ip]) && abs(d[iq])+g==abs(d[iq]))
                    a[iq][ip]=0;
                else if(abs(a[ip][iq])>tresh)
                {
                    h=d[iq]-d[ip];
                    if(abs(h)+g==abs(h))
                        t=a[ip][iq]/h;
                    else
                    {
                        theta=0.5*h/a[ip][iq];
                        t=1/(abs(theta)+sqrt(1+pow(theta,2)));
                        if(theta<0)
                            t=-t;
                    }
                    c=1/sqrt(1+pow(t,2));
                    s=t*c;
                    tau=s/(1+c);
                    h=t*a[ip][iq];
                    z[ip]=z[ip]-h;
                    z[iq]=z[iq]+h;
                    d[ip]=d[ip]-h;
                    d[iq]=d[iq]+h;
                    a[ip][iq]=0;
                    
                    
                    /*Case rotations*/
                    for(j=0;j<ip-1;j++)
                    {
                        g=a[j][ip];
                        h=a[j][iq];
                        a[j][ip]=g-s*(h+g*tau);
                        a[j][iq]=h+s*(g-h*tau);
                    }
                    for(j=ip+1;j<iq-1;j++)
                    {
                        g=a[ip][j];
                        h=a[j][iq];
                        a[ip][j]=g-s*(h+g*tau);
                        a[j][iq]=h+s*(g-h*tau);
                    }
                    for(j=iq+1;i<n;j++)
                    {
                        g=a[ip][j];
                        h=a[iq][j];
                        a[ip][j]=g-s*(h+g*tau);
                        a[iq][j]=h+s*(g-h*tau);
                    }
                    
                    for(j=0;j<n;j++)
                    {
                        g=v[j][ip];
                        h=v[j][iq];
                        v[j][ip]=g-s*(h+g*tau);
                        v[j][iq]=h+s*(g-h*tau);
                    }
                    nrot=nrot+1;
                }
            }
        }
        for(ip=0;ip<n;ip++)
        {
            b[ip]=b[ip]+z[ip];
            d[ip]=b[ip];
            z[ip]=0;
        }
    }
    
    
    for(ip=0;ip<n;ip++)
    {
        for(iq=0;iq<n;iq++)
        cout<<b[ip]<<" ";
        cout<<endl;
    }
}
